# -*- coding: utf-8 -*-
"""Project mau.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eXtU5N4orDMqw5ycB28IOaOGub_51vdE

## Import thư viện
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error,mean_squared_error
from joblib import dump, load

"""## Load Data

Advertising.csv thể hiện doanh số (đơn vị tính bằng nghìn) của một sản phẩm cụ thể tính theo ngân sách quảng cáo (đơn vị tính bằng nghìn đô la) trên các phương tiện truyền thông như TV, radio và newspaper.
"""

df = pd.read_csv("Advertising.csv")

df.head()

"""## Khám phá dữ liệu"""

df.shape

df.columns

df.info()

"""## Xử lý missing value và duplicated"""

df.isnull().sum()

#df.duplicated()
#df.duplicated().sum()
df.duplicated().values.any()

"""## Thống kê mô tả"""

df.describe()

"""## Khai phá dữ liệu/Trực quan đặc trưng

- Mối quan hệ giữa chi tiêu quảng cáo và doanh số

- Mối quan hệ giữa từng kênh quảng cáo (TV, Radio, Newspaper) và doanh số

- Dự đoán doanh số theo chi tiêu quảng cáo.

### Tương quan các biến Correlation matrix
"""

correlation_matrix = df.corr()
print(correlation_matrix)

"""### Biểu đồ phân tán"""

#Trên 3 biểu đồ
plt.scatter(df['TV'],df['sales'],marker='o')
plt.xlabel('TV Ad')
plt.ylabel('Sales')
plt.show()

plt.scatter(df['radio'],df['sales'],marker='o')
plt.xlabel('Radio Ad')
plt.ylabel('Sales')
plt.show()

plt.scatter(df['newspaper'],df['sales'],marker='o')
plt.xlabel('Newspaper Ad')
plt.ylabel('Sales')
plt.show()

#Subplot 3 biểu đồ/1 figure
fg, ax = plt.subplots(1, 3, figsize=(16, 6))
ax[0].scatter(df['TV'],df['sales'],marker='o')
ax[0].set_xlabel('TV Ad')
ax[0].set_ylabel('Sales')
ax[0].set_title("TV Ad vs Sale")

ax[1].scatter(df['radio'],df['sales'],marker='o')
ax[1].set_xlabel('Radio Ad')
ax[1].set_title("Radio Ad vs Sale")


ax[2].scatter(df['newspaper'],df['sales'],marker='o')
ax[2].set_xlabel('Newspaper Ad')
ax[2].set_title("Newspaper Ad vs Sale")

fg.suptitle('Biểu đồ phân tán', fontsize=18)
plt.tight_layout();

"""
### Phân phối của từng biến"""

sns.displot(df['sales'],
            bins=20, #chia 20 khoảng
            aspect=2,
            kde=True,
            color='r')

plt.title('Biểu đồ phân bố Sales')
plt.xlabel('Sales')
plt.ylabel('Count')
plt.show()

sns.displot(df['TV'],
            bins=50,
            aspect=2,
            kde=True,
            color='r')

plt.title('Biểu đồ phân bố TV Ad')
plt.xlabel('TV Ad')
plt.ylabel('Count')
plt.show()

sns.displot(df['radio'],
            bins=50,
            aspect=2,
            kde=True,
            color='r')

plt.title('Biểu đồ phân bố Radio Ad')
plt.xlabel('Radio Ad')
plt.ylabel('Count')
plt.show()

sns.displot(df['newspaper'],
            bins=50,
            aspect=2,
            kde=True,
            color='r')

plt.title('Biểu đồ phân bố Newspaper Ad')
plt.xlabel('Newspaper Ad')
plt.ylabel('Count')
plt.show()

"""- Phân bố của Sales có dạng phân bố chuẩn (Normal Distrubution), không có outlier thật sự nổi bật, không cần xử lý outlier

- Đối với Newspaper Ad

Khoảng IQR:

IQR=Q3−Q1=45.1−12.75=32.35

Giá trị dưới ngưỡng: Q1−1.5×IQR=12.75−1.5×32.35≈−41.425

Giá trị trên ngưỡng: Q3+1.5×IQR=45.1+1.5×32.35≈99.275

Phân bố của Newspaper Ad có 2 điểm outlier (100 và 114) có thể có ý nghĩa trong bối cảnh chi quảng cáo trên newpaper, không cần loại bỏ.

"""

# Biểu đồ cặp (pairplot) biểu diễn tương quan giữa các cột trong DataFrame df dùng hàm KDE(ước lượng mật độ xác suất)
# Đường chéo hiển thị phân phối của từng biến
sns.pairplot(df,diag_kind='kde')

"""## Huấn luyện"""

#Biến độc lập
x = df.drop('sales',axis=1)
#Biến phụ thuộc
y = df['sales']

"""## Chia tập Train | Test"""

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=1)

x_train

y_train

x_test

y_test

"""## Tạo mô hình huấn luyện"""

help(LinearRegression)

model = LinearRegression()

model.fit(x_train,y_train)

"""### Đánh giá trên tập test"""

x_test

y_pred = model.predict(x_test)

y_pred

MAE = mean_absolute_error(y_test,y_pred)
MSE = mean_squared_error(y_test,y_pred)
RMSE = np.sqrt(MSE)
RSQUARE=model.score(x,y)
print(MAE)
print(MSE)
print(RMSE)
print(f'Rsquared:{RSQUARE*100:.2f}')

"""### Trực quan kết quả hồi quy theo 1 biến độc lập TV"""

plt.scatter(x_test.iloc[:,0],y_test,s=40,color='green')
plt.scatter(x_test.iloc[:,0],y_pred,s=40,color='red')

inc = model.intercept_
coef = model.coef_[0]

x_value = np.linspace(x_test.iloc[:, 0].min(), x_test.iloc[:, 0].max(), 100)

y_value = coef * x_value + inc
plt.plot(x_value, y_value, c='blue')
plt.show()

"""### Trực quan kết quả hồi quy theo 3 biến độc lập"""

x0_value = np.linspace(x_test.iloc[:, 0].min(), x_test.iloc[:, 0].max(), 100)
x1_value = np.linspace(x_test.iloc[:, 1].min(), x_test.iloc[:, 1].max(), 100)
x2_value = np.linspace(x_test.iloc[:, 2].min(), x_test.iloc[:, 2].max(), 100)

inc = model.intercept_
coef0 = model.coef_[0]
coef1 = model.coef_[1]
coef2 = model.coef_[2]

X0, X1 = np.meshgrid(x0_value, x1_value)
Y = coef0 * X0 + coef1 * X1 + coef2 * np.mean(x2_value) + inc

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

# Vẽ mặt hồi quy
ax.plot_surface(X0, X1, Y, color='blue', alpha=0.5, label='Mặt hồi quy')

ax.scatter(x_test.iloc[:, 0], x_test.iloc[:, 1], y_test, color='green', label='Y_Test')
ax.scatter(x_test.iloc[:, 0], x_test.iloc[:, 1], y_pred, color='red', label='Y_Pred')
plt.legend()
plt.show()

"""### Trực quan kết quả hồi quy theo từng biến độc lập"""

fg,ax = plt.subplots(1, 3, figsize=(16,6))

ax[0].plot(x_test.iloc[:, 0],y_test,'o')
ax[0].plot(x_test.iloc[:, 0],y_pred,'o',color='red')
inc = model.intercept_
coef0 = model.coef_[0]
x_value = np.linspace(x_test.iloc[:, 0].min(), x_test.iloc[:, 0].max(), 100)
y_value = coef0 * x_value + inc
ax[0].plot(x_value, y_value, c='blue')
ax[0].set_ylabel("Sales")
ax[0].set_title("TV Ad")

ax[1].plot(x_test.iloc[:, 1],y_test,'o')
ax[1].plot(x_test.iloc[:, 1],y_pred,'o',color='red')
inc = model.intercept_
coef1 = model.coef_[1]
x1_value = np.linspace(x_test.iloc[:, 1].min(), x_test.iloc[:, 1].max(), 100)
y1_value = coef1 * x1_value + inc
ax[1].plot(x1_value, y1_value, c='blue')
ax[1].set_title("Radio Ad")
ax[1].set_ylabel("Sales")

ax[2].plot(x_test.iloc[:, 2],y_test,'o')
ax[2].plot(x_test.iloc[:, 2],y_pred,'o',color='red')
inc = model.intercept_
coef2 = model.coef_[2]
x2_value = np.linspace(x_test.iloc[:, 2].min(), x_test.iloc[:, 2].max(), 100)
y2_value = coef2 * x2_value + inc
ax[2].plot(x2_value, y2_value, c='blue')
ax[2].set_title("Newspaper Ad")
ax[2].set_ylabel("Sales")

fg.suptitle('HỒI QUY CÁC BIẾN', fontsize=18)
plt.tight_layout()

"""### Phân tích kết quả dự báo"""

coef_df = pd.DataFrame(model.coef_,x.columns,columns=['Coefficient'])
coef_df

model.intercept_

"""Tăng 1 đơn vị (1k đô la) trong chi phí quảng cáo trên TV dẫn đến tăng doanh số bán hàng là 0,046 đơn vị. Điều này có nghĩa là với mỗi 1.000 đô la chi cho quảng cáo trên TV, dự báo sẽ bán thêm 46 đơn vị hàng hóa nữa.

Tăng 1 đơn vị (1k đô la) trong chi phí quảng cáo trên radiodẫn đến tăng doanh số bán hàng là 0,176 đơn vị. Điều này có nghĩa là với mỗi 1.000 đô la chi cho quảng cáo trên radio,dự báo sẽ bán thêm 176 đơn vị hàng hóa nữa.

Tăng 1 đơn vị (1k đô la) trong chi phí quảng cáo trên newspaperdẫn đến tăng doanh số bán hàng là 0,0018 đơn vị. Điều này có nghĩa là với mỗi 1.000 đô la chi cho quảng cáo trên newspaper, không thể bán thậm chí là được 1 đơn vị hàng hóa. Chi tiêu cho quảng cáo trên newspaper không có tác động thực sự đến doanh số bán hàng.

### Dự đoán trên dữ liệu mới

Dự báo doanh số cho chiến dịch quảng cáo có tổng chi phí là 149k cho quảng cáo trên TV, 22k cho quảng cáo trên Radio và 12k cho quảng cáo trên Newspaper.
"""

new_ad = [[149,22,12]]

model.predict(new_ad)

"""Dự báo sẽ bán được 27 đơn vị hàng hóa

## Lưu model
"""

dump(model, 'sales_model.joblib')

#Load lại model và test
loaded_model = load('sales_model.joblib')

loaded_model.predict(new_ad)